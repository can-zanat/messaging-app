// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=./mock_service.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetSentMessages mocks base method.
func (m *MockStore) GetSentMessages() (*[]Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages")
	ret0, _ := ret[0].(*[]Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockStoreMockRecorder) GetSentMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*MockStore)(nil).GetSentMessages))
}

// GetTwoMessages mocks base method.
func (m *MockStore) GetTwoMessages() (*[]Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwoMessages")
	ret0, _ := ret[0].(*[]Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwoMessages indicates an expected call of GetTwoMessages.
func (mr *MockStoreMockRecorder) GetTwoMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwoMessages", reflect.TypeOf((*MockStore)(nil).GetTwoMessages))
}

// UpdateSentStatus mocks base method.
func (m *MockStore) UpdateSentStatus(arg0 *[]Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSentStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSentStatus indicates an expected call of UpdateSentStatus.
func (mr *MockStoreMockRecorder) UpdateSentStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSentStatus", reflect.TypeOf((*MockStore)(nil).UpdateSentStatus), arg0)
}
