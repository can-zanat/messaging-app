// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go
//
// Generated by this command:
//
//	mockgen -source=./handler.go -destination=./mock_handler.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockactions is a mock of actions interface.
type Mockactions struct {
	ctrl     *gomock.Controller
	recorder *MockactionsMockRecorder
}

// MockactionsMockRecorder is the mock recorder for Mockactions.
type MockactionsMockRecorder struct {
	mock *Mockactions
}

// NewMockactions creates a new mock instance.
func NewMockactions(ctrl *gomock.Controller) *Mockactions {
	mock := &Mockactions{ctrl: ctrl}
	mock.recorder = &MockactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockactions) EXPECT() *MockactionsMockRecorder {
	return m.recorder
}

// GetSentMessages mocks base method.
func (m *Mockactions) GetSentMessages() (*[]Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages")
	ret0, _ := ret[0].(*[]Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockactionsMockRecorder) GetSentMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*Mockactions)(nil).GetSentMessages))
}

// StartSending mocks base method.
func (m *Mockactions) StartSending() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSending")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSending indicates an expected call of StartSending.
func (mr *MockactionsMockRecorder) StartSending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSending", reflect.TypeOf((*Mockactions)(nil).StartSending))
}

// StopSending mocks base method.
func (m *Mockactions) StopSending() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSending")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSending indicates an expected call of StopSending.
func (mr *MockactionsMockRecorder) StopSending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSending", reflect.TypeOf((*Mockactions)(nil).StopSending))
}
